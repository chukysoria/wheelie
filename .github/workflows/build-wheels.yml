name: Build wheels

env:
  PY_REPO_URL: "https://gitlab.com/api/v4/projects/chukysoria%2Fcarloslinuxserver/packages/pypi"

on:
  workflow_dispatch:
    inputs:
      PACKAGES:
        description: "List of packages to build"
        default: ""
        required: true
        type: string
  workflow_call:
    inputs:
      PACKAGES:
        description: "List of packages to build"
        default: ""
        required: true
        type: string

jobs:
  build-multi:
    name: Build ${{ matrix.ARCH }} - ${{ matrix.DISTRO }} 
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ARCH: ["ARMHF-WHEELIE-CHROOT"]
        DISTRO: [alpine-3.17, alpine-3.18, ubuntu-jammy]

    steps:
      - name: Prepare variables
        run: |
          echo "DISTRONAME=$(echo ${{ matrix.DISTRO }} | sed 's|-.*||')" >> $GITHUB_ENV
          echo "DISTROVER=$(echo ${{ matrix.DISTRO }} | sed 's|.*-||')" >> $GITHUB_ENV 
          if [ "${{ matrix.ARCH }}" == "X86-64-MULTI" ]; then
              echo "ARCH=amd64" >> $GITHUB_ENV
              echo "PLATFORM=linux/amd64" >> $GITHUB_ENV
          elif [ "${{ matrix.ARCH }}" == "ARM64" ]; then
              echo "ARCH=arm64v8" >> $GITHUB_ENV
              echo "PLATFORM=linux/arm64" >> $GITHUB_ENV
          else
              echo "ARCH=arm32v7" >> $GITHUB_ENV
              echo "PLATFORM=linux/arm/v7" >> $GITHUB_ENV
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          platforms: ${{ env.PLATFORM }}
          push: true
          pull: true
          tags: ghcr.io/chukysoria/wheelie:${{ env.ARCH }}-${{ env.DISTRONAME }}-${{ env.DISTROVER }}
          build-args: |
            DISTRO=${{ env.DISTRONAME }}
            DISTROVER=${{ env.DISTROVER }}
            ARCH=${{ env.ARCH }}
            PACKAGES=${{ inputs.PACKAGES }}
  
      - name: Retrieve artifacts
        run: |
          if echo "${{ matrix.DISTRO }}" | grep ubuntu; then
              mkdir -p builds/build-ubuntu
              echo "ARTIFACT-NAME=build-ubuntu" >> $GITHUB_ENV
          else
              mkdir -p builds/build-${{ matrix.DISTRO }}
              echo "ARTIFACT-NAME=build-${{ matrix.DISTRO }}" >> $GITHUB_ENV
          fi
          echo "**** Retrieving wheels for ${{ env.ARCH }}-${{ matrix.DISTRO }} ****"
          docker create --name ${{ env.ARCH }}-${{ matrix.DISTRO }} ghcr.io/chukysoria/wheelie:${{ env.ARCH }}-${{ matrix.DISTRO }} blah
          if echo ${{ matrix.DISTRO }} | grep alpine; then
              docker cp ${{ env.ARCH }}-${{ matrix.DISTRO }}:/build/. builds/build-${{ matrix.DISTRO }}/
          else
              docker cp ${{ env.ARCH }}-${{ matrix.DISTRO }}:/build/. builds/build-ubuntu/
          fi
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT-NAME }}
          path:  ${{ github.workspace }}/builds/${{ env.ARTIFACT-NAME }}/*
      

  publish-artifacts:
    name: Publish artifacts
    runs-on: ubuntu-latest
    needs: build-multi
    steps:
      - name: Checkout to temp folder
        uses: actions/checkout@v4
        with:
          ref: main
          path: temp
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./builds

      - name: Check wheels created
        run: |
          echo "pushing wheels as necessary"
          mkdir dist
            for os in ubuntu $(cat ./temp/distros.txt | grep alpine); do
              for wheel in $(ls ./builds/build-${os}/); do
              if ! grep -q "${wheel}" "./temp/docs/${os}/published.txt" && ! echo "${wheel}" | grep -q "none-any"; then
                  echo "**** ${wheel} for ${os} will be uploaded to Python Package Repo ****"
                  UPLOADED="${UPLOADED}\\n${wheel}" 
                  cp  "./builds/build-${os}/${wheel}" "./dist"
                  echo ${wheel} >> "./temp/docs/${os}/published.txt"
              else
                  echo "**** ${wheel} for ${os} already processed, skippng****"
              fi
              done
          done
          if [ -n "${UPLOADED}" ]; then
              echo -e "**** Uploaded wheels are: **** ${UPLOADED}"
              echo "PUBLISH=true" >> $GITHUB_ENV
          else
              echo "No wheels were uploaded"
              echo "PUBLISH=false" >> $GITHUB_ENV
          fi

      - name: Publish packages
        uses: pypa/gh-action-pypi-publish@release/v1
        if: ${{ env.PUBLISH }}
        with:
          user: ${{ secrets.PY_REPO_USER }}
          password: ${{ secrets.PY_REPO_PW }}
          repository-url: ${{ env.PY_REPO_URL}}
          verify-metadata: false
          skip-existing: true

      - name: Updating git repo as necessary
        if: ${{ env.PUBLISH }}
        run: |
          echo "updating git repo as necessary"
          cd ./temp
          git config --global user.name 'Bot'
          git config --global user.email 'bot@users.noreply.github.com'
          git commit -am '[bot] Updating indices'
          git push
