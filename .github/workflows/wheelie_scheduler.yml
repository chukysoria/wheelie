name: Wheelie Scheduler

on:
  schedule:
    - cron:  '00 1 * * *'
  workflow_dispatch:

jobs:
  get-variables:
    name: üë∑ Get packages and distros
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out repo
        uses: actions/checkout@v4.1.1
        with:
          sparse-checkout: |
            packages.txt
            distros.txt
          sparse-checkout-cone-mode: false
      
      - name:  ‚ÑπÔ∏è Export packages and distros
        id: variables
        run: |
          echo "ALLPACKAGES=$( tr '\n' ' ' < packages.txt)" >> $GITHUB_OUTPUT
          echo "TAGS=$((sed -r 's/-/:latest-/g' | jq -R -s -c 'split("\n")') < distros.txt )" >> $GITHUB_OUTPUT
    
    outputs:
      ALLPACKAGES: ${{ steps.variables.outputs.ALLPACKAGES }}
      TAGS: ${{ steps.variables.outputs.TAGS }}

  run-containers:
    name: üë∑ Check new packages to build
    needs: get-variables
    runs-on: ubuntu-latest
    env:
      FILE_PATH: ./packages_to_install.txt
    strategy:
      matrix:
        TAG: ${{ fromJson(needs.get-variables.outputs.TAGS) }}

    steps:
      - name: ‚§µÔ∏è Check out repo
        uses: actions/checkout@v4.1.1
        with:
          sparse-checkout: |
            docs

      - name: üèó Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0

      - name: üöÄ Run container
        id: run-container
        run: |
          DISTRO="$(echo '${{ matrix.TAG }}' | sed -r 's/:latest-/-/g')"
          echo "DISTRO=$DISTRO" >> $GITHUB_OUTPUT
          docker run -d --rm --name $DISTRO ghcr.io/chukysoria/baseimage-${{ matrix.TAG }}

      - name: üöÄ Install dependencies        
        run: |
          docker exec ${{ steps.run-container.outputs.DISTRO }} bash -c "\
            if [ -f /usr/bin/apt ]; then \
              apt-get update && apt-get install -y python3-venv; \
            else \
              apk add --no-cache python3; \
            fi && \
            mkdir -p /lsiopy && \
            python3 -m venv /lsiopy && \
            /lsiopy/bin/pip install -U pip"

      - name: üöÄ Check packages
        id: check-packages
        run: |
          IMAGE=$(echo ${{ steps.run-container.outputs.DISTRO }} | awk -F'-' '{print $1}')
          TAG=$(echo ${{ steps.run-container.outputs.DISTRO }} | awk -F'-' '{print $2}')
          if [ "${IMAGE}" = "alpine" ]; then
            OS="${{ steps.run-container.outputs.DISTRO }}"
          else
            OS="${IMAGE}"
          fi          
          CPYTHON=$(docker exec ${{ steps.run-container.outputs.DISTRO }} bash -c "printf \"\$(python3 -V)\" | awk '{print \$2}' | awk 'BEGIN{FS=OFS=\".\"} NF--' | sed 's|\.||g' | sed 's|^|cp|g'")
          for PACKAGE in ${{ needs.get-variables.outputs.ALLPACKAGES }}; do
            if echo "${PACKAGES}" | grep -iq "${PACKAGE}"; then
              break
            fi
            VERSION=$(docker exec ${{ steps.run-container.outputs.DISTRO }} bash -c "/lsiopy/bin/pip install ${PACKAGE}== 2>&1 | sed -rn 's|^.*versions:(.*)\).*$|\1|p' | sed 's%[0-9.]*\(a\|b\|rc\|dev\)[0-9]*%%g' | sed 's%,%%g' | awk '{print \$(NF)}'")
            for ARCH in armv7l x86_64 aarch64; do
              if [ "$PACKAGE" = "wrapt" ] && [ "$ARCH" = "armv7l" ]; then
                echo "**** ${PACKAGE}-${VERSION}-${CPYTHON}-${ARCH} already built for ${{ steps.run-container.outputs.DISTRO }}, skipping ****"
              elif ! grep -iq "${PACKAGE//-/_}-${VERSION}-${CPYTHON}.*${ARCH}.whl" "docs/${OS}/published.txt" && ! grep -iq "${PACKAGE//-/_}-${VERSION}.*manylinux.*${ARCH}.whl" "docs/${OS}/published.txt" && ! grep -iq "${PACKAGE//-/_}-${VERSION}.*musllinux.*${ARCH}.whl" "docs/${OS}/published.txt"; then
                echo "**** Adding ${PACKAGE}-${VERSION} to build list ****"
                PACKAGES="${PACKAGE} ${PACKAGES}"
                break
              else
                echo "**** ${PACKAGE}-${VERSION}-${CPYTHON}-${ARCH} wheel already built for ${{ steps.run-container.outputs.DISTRO }}, skipping ****"
              fi
            done
          done
          if [ -n "$PACKAGES" ]; then
            echo "$PACKAGES" >> ${{ env.FILE_PATH }}
            echo "UPLOAD=true" >> $GITHUB_OUTPUT
            echo "Packages to build for ${{ steps.run-container.outputs.DISTRO }}: $PACKAGES" >> $GITHUB_STEP_SUMMARY
          else
            echo "**** No new updates to any of the packages for ${{ steps.run-container.outputs.DISTRO }} ****"
          fi
        
      - name: üèó Upload Artifact
        uses: actions/upload-artifact@v4.3.1
        if: ${{ steps.check-packages.outputs.UPLOAD }}
        with:
          name: ${{ steps.run-container.outputs.DISTRO }}
          path: ${{ env.FILE_PATH }}

  merge-artifacts:
    name: üë∑ Merge Artifacts
    needs: run-containers
    runs-on: ubuntu-latest
    env:
      folder: ./artifacts
    steps:
      - name: ‚§µÔ∏è Download artifacts
        uses: actions/download-artifact@v4.1.2
        with:
          path: ${{ env.folder }}
      
      - name: ‚ÑπÔ∏è Merge packages, removing duplicates
        id: merge-packages
        run: |
          if [[ -d ${{ env.folder }} ]]; then
            PACKAGES=$(find ${{ env.folder }} -name packages_to_install.txt -exec cat {} + | awk '!a[$0]++' | tr '\n' ' ')
            echo "PACKAGES=$PACKAGES" >> "$GITHUB_OUTPUT"
            echo "Packages to build are: $PACKAGES" >> $GITHUB_STEP_SUMMARY
          else
            echo "No new packages to build" >> $GITHUB_STEP_SUMMARY
          fi

    outputs:
      PACKAGES: ${{ steps.merge-packages.outputs.PACKAGES }}
  
  build-wheels:
    name: üë∑ Build wheels
    needs: merge-artifacts
    if: ${{ needs.merge-artifacts.outputs.PACKAGES != '' }}
    uses: ./.github/workflows/build-wheels.yml
    with:
      PACKAGES: ${{ needs.merge-artifacts.outputs.PACKAGES }}
    secrets: inherit
