name: Build wheels

env:
  PY_REPO_URL: "https://gitlab.com/api/v4/projects/chukysoria%2Fcarloslinuxserver/packages/pypi"

on:
  workflow_dispatch:
    inputs:
      PACKAGES:
        description: "List of packages to build"
        default: ""
        required: true
        type: string
  workflow_call:
    inputs:
      PACKAGES:
        description: "List of packages to build"
        default: ""
        required: true
        type: string

jobs:
  build-multi:
    name: 👷 Build ${{ matrix.architecture }} - ${{ matrix.DISTRO }} 
    runs-on: ubuntu-latest
    env:
      DISTRONAME:
      DISTROVER:
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        architecture: ["armv7", "x86_64", "aarch64"]
        DISTRO: [alpine-3.19, ubuntu-jammy]

    steps:
      - name: ℹ️ Compose build flags
        id: flags
        run: |
          echo "DISTRONAME=$(echo ${{ matrix.DISTRO }} | sed 's|-.*||')" >> $GITHUB_ENV
          echo "DISTROVER=$(echo ${{ matrix.DISTRO }} | sed 's|.*-||')" >> $GITHUB_ENV 
          
          if [[ "${{ matrix.architecture }}" = "amd64" || "${{ matrix.architecture }}" = "x86_64" ]]; then
            echo "platform=linux/amd64" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "i386" ]]; then
            echo "platform=linux/386" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armhf" ]]; then
            echo "platform=linux/arm/v6" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
            echo "platform=linux/arm/v7" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
            echo "platform=linux/arm64/v8" >> "$GITHUB_OUTPUT"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi

      - name: 🏗 Restore build cache
        id: cache
        uses: actions/cache@v4.0.1
        with:
          path: /tmp/.docker-cache
          key: docker-${{ matrix.DISTRO }}-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ matrix.DISTRO }}-${{ matrix.architecture }} 
  
      - name: 🏗 Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0

      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.2.0
        with:
          platforms: ${{ steps.flags.outputs.platform }}

      - name: 🏗 Login to Github Container Repo
        uses: docker/login-action@v3.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Build
        uses: docker/build-push-action@v5.3.0
        with:
          platforms: ${{ steps.flags.outputs.platform }}
          load: true
          cache-from: |
            type=local,src=/tmp/.docker-cache
            ghcr.io/chukysoria/wheelie:${{ matrix.architecture }}-${{ env.DISTRONAME }}-${{ env.DISTROVER }}
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache-new 
          tags: ghcr.io/chukysoria/wheelie:${{ matrix.architecture }}-${{ env.DISTRONAME }}-${{ env.DISTROVER }}
          build-args: |
            DISTRO=${{ env.DISTRONAME }}
            DISTROVER=${{ env.DISTROVER }}
            ARCH=${{ matrix.architecture }}
            PACKAGES=${{ inputs.PACKAGES }}

      - name: 🚀 Push
        uses: docker/build-push-action@v5.3.0
        with:
          platforms: ${{ steps.flags.outputs.platform }}
          push: true
          cache-from: |
            type=local,src=/tmp/.docker-cache-new
            ghcr.io/chukysoria/wheelie:${{ matrix.architecture }}-${{ env.DISTRONAME }}-${{ env.DISTROVER }}
          tags: ghcr.io/chukysoria/wheelie:${{ matrix.architecture }}-${{ env.DISTRONAME }}-${{ env.DISTROVER }}
          build-args: |
            DISTRO=${{ env.DISTRONAME }}
            DISTROVER=${{ env.DISTROVER }}
            ARCH=${{ matrix.architecture }}
            PACKAGES=${{ inputs.PACKAGES }}

      - name: 🚀 Retrieve artifacts
        id: retrieve-artifacts
        run: |
          if echo "${{ matrix.DISTRO }}" | grep ubuntu; then
              mkdir -p builds/build-ubuntu
              echo "ARTIFACT-NAME=build-ubuntu" >> $GITHUB_OUTPUT
          else
              mkdir -p builds/build-${{ matrix.DISTRO }}
              echo "ARTIFACT-NAME=build-${{ matrix.DISTRO }}" >> $GITHUB_OUTPUT
          fi
          echo "**** Retrieving wheels for ${{ matrix.architecture }}-${{ matrix.DISTRO }} ****"
          docker create --name ${{ matrix.architecture }}-${{ matrix.DISTRO }} ghcr.io/chukysoria/wheelie:${{ matrix.architecture }}-${{ matrix.DISTRO }} blah
          if echo ${{ matrix.DISTRO }} | grep alpine; then
              docker cp ${{ matrix.architecture }}-${{ matrix.DISTRO }}:/build/. builds/build-${{ matrix.DISTRO }}/
          else
              docker cp ${{ matrix.architecture }}-${{ matrix.DISTRO }}:/build/. builds/build-ubuntu/
          fi
      
      - name: 🚀 Upload Artifact
        uses: actions/upload-artifact@v4.3.1
        with:
          name: ${{ steps.retrieve-artifacts.outputs.ARTIFACT-NAME }}-${{ matrix.architecture }}
          path: ${{ github.workspace }}/builds/${{ steps.retrieve-artifacts.outputs.ARTIFACT-NAME }}/*
     
      # This ugly bit is necessary, or our cache will grow forever...
      # Well until we hit GitHub's limit of 5GB :)
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: 🚚 Swap build cache
        if: ${{ github.event_name != 'release' }}
        run: |
          rm -rf /tmp/.docker-cache
          mv /tmp/.docker-cache-new /tmp/.docker-cache

  publish-artifacts:
    name: 👷Publish artifacts
    runs-on: ubuntu-latest
    needs: build-multi
    steps:
      - name: ⤵️ Checkout to temp folder
        uses: actions/checkout@v4.1.1
        with:
          ref: main
          path: temp
      
      - name: ⤵️ Download artifacts
        uses: actions/download-artifact@v4.1.4
        with:
          path: ./builds

      - name: 🚀 Check wheels created
        id: check-wheels
        run: |
          echo "pushing wheels as necessary"
          mkdir dist
            for os in ubuntu $(cat ./temp/distros.txt | grep alpine); do
              for arch in armv7 x86_64 aarch64; do
                for wheel in $(ls ./builds/build-${os}-${arch}/); do
                  if ! grep -iq "${wheel}" "./temp/docs/${os}/published.txt" && ! echo "${wheel}" | grep -iq "none-any"; then
                      echo "**** ${wheel} for ${os} will be uploaded to Python Package Repo ****"
                      UPLOADED="${UPLOADED}\\n${wheel}" 
                      cp  "./builds/build-${os}-${arch}/${wheel}" "./dist"
                      echo ${wheel} >> "./temp/docs/${os}/published.txt"
                  else
                      echo "**** ${wheel} for ${os} already processed, skipping****"
                  fi
                done
              done
          done
          if [ -n "${UPLOADED}" ]; then
              echo -e "**** Uploaded wheels are: **** ${UPLOADED}" >> $GITHUB_STEP_SUMMARY
              echo "PUBLISH=true" >> $GITHUB_OUTPUT
          else
              echo "No wheels were uploaded"
          fi

      - name: 🚀 Publish packages
        uses: pypa/gh-action-pypi-publish@v1.8.12
        if: ${{ steps.check-wheels.outputs.PUBLISH }}
        with:
          user: ${{ secrets.PY_REPO_USER }}
          password: ${{ secrets.PY_REPO_PW }}
          repository-url: ${{ env.PY_REPO_URL}}
          verify-metadata: false
          skip-existing: true

      - name: 🚀 Updating git repo as necessary
        if: ${{ steps.check-wheels.outputs.PUBLISH }}
        run: |
          echo "updating git repo as necessary"
          cd ./temp
          git config --global user.name 'Bot'
          git config --global user.email 'bot@users.noreply.github.com'
          git commit -am '[bot] Updating indices'
          git push
